@page "/nftdataupload/{nftId}"

@using StarboardNFT.Data;
@using System.Text;
@using StarboardNFT.Models;
@using Nethereum.Web3;
@using Nethereum.UI;
@using Nethereum.Metamask;
@using StarboardNFTLibrary.Contracts.StarboardNFT.ContractDefinition;
@using StarboardNFTLibrary.Contracts.StarboardNFT;
@using StarboardNFTLibrary.Contracts.StarboardNFTMarket.ContractDefinition
@using StarboardNFTLibrary.Contracts.StarboardNFTMarket;
@using StarboardNFTLibrary.Contracts.StarboardNFT1155.ContractDefinition;
@using StarboardNFTLibrary.Contracts.StarboardNFT1155;
@using Newtonsoft.Json;
@using Nethereum.RPC.Eth.DTOs;
@using Nethereum.BlockchainProcessing.Processor;
@using System.Collections.Generic;
@using System.Threading;
@using System.Threading.Tasks;
@using Nethereum.Web3.Accounts;
@using System.Numerics;
@using Ipfs;
@using Nethereum.Contracts;

@inject Blazored.LocalStorage.ILocalStorageService localStore;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationService

@inherits OwningComponentBase<NFTService>
@inject MetamaskHostProvider _metamaskHostProvider;
@inject Microsoft.Extensions.Configuration.IConfiguration config;


<main>
    <div class="container" style=" margin-top: 50px;">
        <div class="row">
            <div class="col-lg-5 mb-3">
                <div class="col__wrapper ">
                    <h2>
                        Sell NFT
                    </h2>
                    <div class="card bg_transparent form__z__wrapper mt-2 mt-md-4">
                        <div class="card__wrapper">
                            @if (@file_extensions == "image")
                            {
                                <div class="file__output__wrapper">
                                    <img src="@previewSrc" alt="" class="img_object_cover rounded-0 card-img border-0 h-100 w-100">
                                </div>
                            }
                            else if (@file_extensions == "video")
                            {
                                <div class="file__output__wrapper">
                                    <video src="@previewSrc" class="img_object_cover rounded-0 card-img border-0 h-100 w-100" muted autoplay></video>
                                </div>
                            }
                            else if (@file_extensions == "audio")
                            {
                                <div class="file__output__wrapper">
                                    <div class="audio__play__wrapper d-flex justify-content-around align-items-center flex-column w-100 h-100">
                                        <i class="fas fa-music  fa-6x text-white-50 "></i>
                                        <button onclick="AudioToggle(this)"
                                                class="audio__play btn bg_darkblack">
                                            <i class="fas fa-play"></i>
                                            <i class="fas fa-pause"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (@file_extensions == "text")
                            {
                                <div class="file__output__wrapper" style="overflow-y: auto">
                                    <div class="text__output p-3">
                                        @if (!string.IsNullOrEmpty(previewSrc))
                                            @previewSrc
                                    </div>
                                </div>
                            }
                            else if (@file_extensions == "application")
                            {
                                <div class="file__output__wrapper" style="overflow-y: auto">
                                    <div class="file__output p-3 h-100 d-flex justify-content-center align-items-center">
                                        <i class="fas fa-file-archive text-white-50 fa-5x    "></i>
                                    </div>
                                </div>
                            }
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(@nft.Title))
                                {
                                    <strong>@title</strong>
                                }
                                else
                                {
                                    <strong> Your Title here</strong>
                                }

                                <div class="created__user">
                                    <span class="text-white-50">Created by</span> <span class="px-2">
                                        <i class="fas fa-user  text-info  "></i> @shortAddr
                                    </span>
                                </div>
                            </div>
                            <footer class="card-footer p-3 p-md-4">
                            </footer>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-7 h-auto mb-3" Data="@nftData">
                @if (@form_step == 1)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            <div>
                                <div class="row" style="margin-top: 2rem">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 0.5rem; display: inline;">USD Start Price</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenNumeric TValue="decimal" Format="0.00" @bind-Value="@nftData.FiatStartPrice" Placeholder="Enter or clear value" />
                                    </div>
                                </div>
                                @*<div class="row" style="margin-top: 2rem;">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Set Buyout Price</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenCheckBox @bind-Value="@nftData.HasBuyoutPrice" TValue="bool" />
                                    </div>
                                </div>*@
                                @if (nftData.HasBuyoutPrice == true)
                                {
                                    <div class="row" style="margin-top: 2rem">
                                        <div class="col-md-6">
                                            <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">USD Buyout Price</h5>
                                        </div>
                                        <div class="col-md-6">
                                            <RadzenNumeric TValue="decimal" Format="0.00" @bind-Value="@nftData.FiatBuyOutPrice" Placeholder="Enter or clear value" />
                                        </div>
                                    </div>
                                }
                                @*<div class="row" style="margin-top: 2rem;">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Set Reserve Price</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenCheckBox @bind-Value="@nftData.HasReservePrice" TValue="bool" />
                                    </div>
                                </div>*@
                                @if (@nftData.HasReservePrice == true)
                                {
                                    <div class="row" style="margin-top: 2rem;">
                                        <div class="col-md-6">
                                            <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Reserve Price</h5>
                                        </div>
                                        <div class="col-md-6">
                                            <RadzenNumeric TValue="decimal" Format="0.00" @bind-Value="@nftData.FiatReservePrice" Placeholder="Enter or clear value" />
                                        </div>
                                    </div>
                                }
                                @if (isResell == false)
                                {
                                    <div class="row" style="margin-top: 2rem;">
                                        <div class="col-md-6">
                                            <h5 style="margin-top: .2rem; margin-right: 1.5rem; display: inline;">Royalty</h5>
                                        </div>
                                        <div class="col-md-6">
                                            <RadzenNumeric TValue="decimal" Format="0.00" @bind-Value="@nftData.Royalty" Placeholder="Enter or clear value" />
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="w-100 text-center" style="margin-top: 50px;">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-5 py-2 mr-2" @onclick="(() => OnBack())">
                                    Back
                                </button>
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2" @onclick="(() => OnContinue())">
                                    Continue
                                </button>
                            </div>
                        </div>
                    </div>
                }
                @if (@form_step == 2)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            @if (@isSetSchedule == false)
                            {
                                <div class="row" style="margin-top: 2rem;">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Auction Days</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenNumeric TValue="int" @bind-Value="@auctionDays" Placeholder="Enter or clear value" />
                                    </div>
                                </div>
                            }

                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Set Schedule</h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenCheckBox @bind-Value="@isSetSchedule" TValue="bool" />
                                </div>
                            </div>

                            @if (@isSetSchedule == true)
                            {
                                <div class="row" style="margin-top: 2rem">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 0.5rem; display: inline;">Sales Start Date</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenDatePicker TValue="DateTime" @bind-Value="@localStartDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </div>
                                </div>

                                <div class="row" style="margin-top: 2rem">
                                    <div class="col-md-6">
                                        <h5 style="margin-top: .2rem; margin-right: 0.5rem; display: inline;">Sales End Date</h5>
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenDatePicker TValue="DateTime" @bind-Value="@localEndDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    </div>
                                </div>
                            }
                            <div class="w-100 text-center" style="margin-top: 50px;">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-5 py-2 mr-2" @onclick="(() => OnBack())">
                                    Back
                                </button>
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2" @onclick="(() => OnContinue())">
                                    Continue
                                </button>
                            </div>
                        </div>
                    </div>
                }
                @if (@form_step == 3)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 0.5rem; display: inline;">Search Tags</h5>
                                </div>
                                <div class="col-md-6">
                                    <input type="text" data-role="tagsinput" @bind-value="@nftData.Tags" name="tags" class="form-control">
                                </div>
                            </div>
                            <div class="w-100 text-center" style="margin-top: 50px;">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-5 py-2 mr-2" @onclick="(() => OnBack())">
                                    Back
                                </button>
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2" @onclick="(() => OnContinue())">
                                    Continue
                                </button>
                            </div>
                        </div>
                    </div>
                }
                @if (@form_step == 4)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">USD Start Price : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@nftData.FiatStartPrice.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">USD Buyout Price : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@nftData.FiatBuyOutPrice.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Reserve Price : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@nftData.FiatReservePrice.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Royalty : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@nftData.Royalty.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Sale Start Date : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@localStartDateTime.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Sale End Date : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@localEndDateTime.ToString()" Component="CheckBox1" />
                                </div>
                            </div>
                            <div class="row" style="margin-top: 2rem;">
                                <div class="col-md-6">
                                    <h5 style="margin-top: .2rem; margin-right: 2rem; display: inline;">Tags : </h5>
                                </div>
                                <div class="col-md-6">
                                    <RadzenLabel Text="@nftData.Tags" Component="CheckBox1" />
                                </div>
                            </div>

                            <div class="w-100 text-center" style="margin-top: 50px;">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-5 py-2 mr-2" disabled="@isLoading" @onclick="(() => OnBack())">
                                    Back
                                </button>
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2" disabled="@isLoading" @onclick="(() => OnPublish())">
                                    Finalize & Publish
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else if (@form_step == 5 && isPublished == false)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            <span class="reject__icon d-block text-center h1">
                                !
                            </span>
                            <p class="my-3 my-md-4 text-white-50">
                                It looks like the transition was rejected in your wallet. Try again?
                            </p>
                            <div class="w-100 text-center">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 p-3 px-md-4">
                                    Retry
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else if (@form_step == 5 && isPublished == true)
                {
                    <div class="col__wrapper h-100 row justify-content-center align-items-center">
                        <div class="col-10 col-md-9 col-lg-8">
                            <span class="d-block text-center ">
                                <i class="fas fa-check-circle fa-10x  text-success  "></i>
                            </span>
                            <p class="my-3 my-md-4 text-center">
                                <strong class="text-success"> NFT Successfully Created</strong>
                            </p>
                            <div class="w-100 text-center">
                                <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2 mr-2" @onclick="@goBackToPortfolio">
                                    Go back to portfolio
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

@code {
    @*DateTime? value = DateTime.Now;

        IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };*@

    public string title { get; set; }
    string description { get; set; }
    string file_name { get; set; }
    string file_type { get; set; }
    string file_extensions { get; set; }
    byte[] file_content { get; set; }
    bool success { get; set; }
    bool isPublished { get; set; }
    bool isSetBuyoutPrice { get; set; }
    bool isSetReservePrice { get; set; }
    bool isSetSchedule { get; set; }
    bool isResell { get; set; }
    bool isLoading { get; set; }
    MarketItem onlineNFT { get; set; }
    string previewSrc { get; set; }
    string ethAddress { get; set; }
    string tags { get; set; }
    int form_step { get; set; }
    public string shortAddr { get; set; }
    public DateTime localStartDateTime;
    public DateTime localEndDateTime;

    int auctionDays;

    StarboardNFT.Models.NFTData nftData = new NFTData();
    NFT nft = new NFT();

    private static StarboardNFTService service;
    private static StarboardNFTMarketService marketService;
    private static Web3 web3;

    [Parameter]
    public string Nftid { get; set; }

    void OnChange(DateTime? value, string name, string format)
    {
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isResell = false;
            isLoading = false;
            nft = await Service.GetNFTbyId(Nftid);

            nftData = await Service.GetNFTDatabyNFTId(Nftid);
            nftData.NFTId = nft.Id;
           
        if(nftData == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        if (nftData.SaleStartDate != null) isSetSchedule = true;

        var file_type = nft.FileType;

        if (file_type.StartsWith("image/"))
        {
            file_extensions = "image";
        }
        else if (file_type.StartsWith("video/"))
        {
            file_extensions = "video";
        }
        else if (file_type.StartsWith("audio/"))
        {
            file_extensions = "audio";
        }
        else if (file_type.StartsWith("text/"))
        {
            file_extensions = "text";
        }
        else if (file_type.StartsWith("application/"))
        {
            file_extensions = "application";
        }

        if (file_type.StartsWith("text/"))
        {
            previewSrc = Encoding.UTF8.GetString(nft.FileContent, 0, nft.FileContent.Length);
        }
        else
        {
            string base64 = Convert.ToBase64String(nft.FileContent);
            previewSrc = string.Format("data:{0};base64,{1}", file_type, base64);
        }


        var selectedAccountAddress = await _metamaskHostProvider.EnableProviderAsync();
        var profileheader_Id = await localStore.GetItemAsync<Guid>("headerId");

        if(profileheader_Id == Guid.Empty || selectedAccountAddress == null)
        {
            NavigationManager.NavigateTo("signin");
            return;
        }


        string marketContractAddress = config.GetSection("ContractSettings")["StarboardMarketContractAddress"].ToString();

        string nftAddress = config.GetSection("ContractSettings")["Starboard721ContractAddress"].ToString();

        string nft1155Address = config.GetSection("ContractSettings")["Starboard1155ContractAddress"].ToString();

        string infuraUrl = config.GetSection("ContractSettings")["InfuraURL"].ToString();

        web3 = await _metamaskHostProvider.GetWeb3Async();
        var _web3 = new Web3(infuraUrl);

        var marketservice = new StarboardNFTMarketService(web3, marketContractAddress);

        var _marketservice = new StarboardNFTMarketService(_web3, marketContractAddress);

        var myNFTFetchFunction = new FetchMyNFTsFunction()
        {
            FromAddress = selectedAccountAddress,
        };

        var data = await _marketservice.FetchMyNFTsQueryAsync(myNFTFetchFunction);

        var myNFTDatas = data.ReturnValue1;


        foreach (var marketitem in myNFTDatas)
        {
            if (marketitem.TokenId == nftData.UniqueNumberOfMintedNFT)
            {
                if ((nftData.NFT.IsMultiple && marketitem.NftContract == nft1155Address.ToLower()) || (!nftData.NFT.IsMultiple && marketitem.NftContract == nftAddress.ToLower()))
                {
                    isResell = true;
                    onlineNFT = marketitem;
                }

            }
        }

        ethAddress = await localStore.GetItemAsync<string>("address");

        if (!string.IsNullOrEmpty(ethAddress))
        {
            shortAddr = ethAddress.Substring(0, 6) + "..." + ethAddress.Substring(38);
        }

        form_step = 1;

        auctionDays = 1;

        localStartDateTime = DateTime.Now;
        localEndDateTime = DateTime.Now.AddDays(1);

        StateHasChanged();
    }
}

async Task OnPublish()
{
    isLoading = true;

    ethAddress = await _metamaskHostProvider.EnableProviderAsync();

    string marketContractAddress = config.GetSection("ContractSettings")["StarboardMarketContractAddress"].ToString();

    string nftAddress = config.GetSection("ContractSettings")["Starboard721ContractAddress"].ToString();

    string nft1155Address = config.GetSection("ContractSettings")["Starboard1155ContractAddress"].ToString();

    web3 = await _metamaskHostProvider.GetWeb3Async();

    nftData.NFTId = nft.Id;

    TimeZoneInfo tz = TimeZoneInfo.Local;
    nftData.SaleStartDate = TimeZoneInfo.ConvertTimeToUtc(localStartDateTime, tz);
    nftData.SaleEndtDate = TimeZoneInfo.ConvertTimeToUtc(localEndDateTime, tz);

    try
    {

        if (!isResell)
        {
            if (nftData.Royalty > 50)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Royaltiy must not be bigger than 50", Detail = "Royaltiy must not be bigger than 50.", Duration = 4000 });
                isLoading = false;
                return;
            }

            if (nft.IsMultiple)
            {

                var starboardNft1155Service = new StarboardNFT1155Service(web3, nft1155Address);
                var starboardMarketService = new StarboardNFTMarketService(web3, marketContractAddress);

                var createMultiTokenFunction = new StarboardNFTLibrary.Contracts.StarboardNFT1155.ContractDefinition.CreateTokenFunction()
                {
                    FromAddress = ethAddress,
                    Amount = nft.TotalNumberOfMintedNFT
                };


                var multiTokenCreateTransaction = await starboardNft1155Service.CreateTokenRequestAndWaitForReceiptAsync(createMultiTokenFunction);


                var multiTokenCreateTransactionResult = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(multiTokenCreateTransaction.TransactionHash);

                var multiTokenTransactionEvents = multiTokenCreateTransactionResult.DecodeAllEvents<TransferSingleEventDTO>();

                var multiTokenId = multiTokenTransactionEvents[0].Event.Id;

                var price = Math.Round(nftData.FiatBuyOutPrice / Startup.CoinPriceDict["ETH"], 8, MidpointRounding.AwayFromZero);
                var backToWeiPrice = Nethereum.Web3.Web3.Convert.ToWei(price);
                var listingPrice = await starboardMarketService.GetListingPriceQueryAsync();

                var AmountToSendPrice = nft.TotalNumberOfMintedNFT * listingPrice * backToWeiPrice / 10000;

                var multiMarketItemCreateFunction = new CreateMultiMarketItemFunction
                {
                    Nft1155Contract = nft1155Address,
                    TokenId = multiTokenId,
                    Price = backToWeiPrice,
                    AmountToSend = AmountToSendPrice,
                    FromAddress = ethAddress,
                    Royalty = (BigInteger)(Decimal.Round(nftData.Royalty, 2) * 100),
                    Amount = nft.TotalNumberOfMintedNFT
                };

                var multiMarketItemCreateTransaction = await starboardMarketService.CreateMultiMarketItemRequestAndWaitForReceiptAsync(multiMarketItemCreateFunction);

                nftData.UniqueNumberOfMintedNFT = (int)multiTokenId;

            } else
            {


                var tokenURIData = new NFTData()
                {
                    FiatStartPrice = Math.Round(nftData.FiatStartPrice / Startup.CoinPriceDict["ETH"], 8, MidpointRounding.AwayFromZero),
                    FiatBuyOutPrice = Math.Round(nftData.FiatBuyOutPrice / Startup.CoinPriceDict["ETH"], 8, MidpointRounding.AwayFromZero),
                    Id = nftData.Id,
                    NFTId = nftData.NFTId,
                    Royalty = nftData.Royalty
                };

                var tokenURI = JsonConvert.SerializeObject(tokenURIData);

                var starboardNftService = new StarboardNFTService(web3, nftAddress);

                var marketservice = new StarboardNFTMarketService(web3, marketContractAddress);

                var createTokenFunction = new StarboardNFTLibrary.Contracts.StarboardNFT.ContractDefinition.CreateTokenFunction()
                {
                    FromAddress = ethAddress,
                    TokenURI = nftData.NFTId.ToString()
                };

                var mintingresult = await starboardNftService.CreateTokenRequestAndWaitForReceiptAsync(createTokenFunction);

                var txnreceipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(mintingresult.TransactionHash);

                var events = txnreceipt.DecodeAllEvents<TransferEventDTO>();

                var tokenId = events[0].Event.TokenId;
                var price = Math.Round(nftData.FiatBuyOutPrice / Startup.CoinPriceDict["ETH"], 8, MidpointRounding.AwayFromZero);
                var backToWeiPrice = Nethereum.Web3.Web3.Convert.ToWei(price);
                var listingPrice = await marketservice.GetListingPriceQueryAsync();

                var createItemFunction = new CreateMarketItemFunction()
                {
                    NftContract = nftAddress,
                    TokenId = tokenId,
                    Price = backToWeiPrice,
                    AmountToSend = (listingPrice * backToWeiPrice / 10000),
                    FromAddress = ethAddress,
                    Royalty = (BigInteger)(Decimal.Round(nftData.Royalty, 2) * 100)
                };

                var starboardNFTMarketService = new StarboardNFTMarketService(web3, marketContractAddress);

                var createMarketItemtransaction = await starboardNFTMarketService.CreateMarketItemRequestAndWaitForReceiptAsync(createItemFunction);

                var markettxnreceipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(createMarketItemtransaction.TransactionHash);

                var marketevents = markettxnreceipt.DecodeAllEvents<MarketItemCreatedEventDTO>();

                var itemId = marketevents[0].Event.ItemId;

                nftData.UniqueNumberOfMintedNFT = (int)tokenId;

            }

        } else
        {
            var price = Math.Round(nftData.FiatBuyOutPrice / Startup.CoinPriceDict["ETH"], 8, MidpointRounding.AwayFromZero);

            var backToWeiPrice = Nethereum.Web3.Web3.Convert.ToWei(price);

            if (!nftData.NFT.IsMultiple)
            {
                var starboardNFTMarketService = new StarboardNFTMarketService(web3, marketContractAddress);

                var listingPrice = await starboardNFTMarketService.GetListingPriceQueryAsync();



                var ResellFunction = new PutItemToResellFunction()
                {
                    NftContract = nftAddress,
                    AmountToSend = listingPrice * backToWeiPrice / 10000,
                    ItemId = onlineNFT.ItemId,
                    NewPrice = backToWeiPrice,
                    FromAddress = ethAddress
                };

                var ResellTransaction = await starboardNFTMarketService.PutItemToResellRequestAndWaitForReceiptAsync(ResellFunction);

                nftData.UniqueNumberOfMintedNFT = (int)onlineNFT.TokenId;

            }
            else
            {

                List<BigInteger> itemIds = new List<BigInteger>();

                var starboardNFTMarketService = new StarboardNFTMarketService(web3, marketContractAddress);

                var myNFTFetchFunction = new FetchMyNFTsFunction()
                {
                    FromAddress = ethAddress
                };

                var nftdata = await starboardNFTMarketService.FetchMyNFTsQueryAsync(myNFTFetchFunction);

                if (nftdata != null)
                {

                    foreach (MarketItem item in nftdata.ReturnValue1)
                    {
                        if (item.TokenId == (BigInteger)nftData.UniqueNumberOfMintedNFT && item.NftContract == nft1155Address.ToLower())
                        {
                            itemIds.Add((BigInteger)item.ItemId);
                        }
                    }

                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "MarketItem was not created.", Duration = 4000 });
                    return;
                }


                var listingPrice = await starboardNFTMarketService.GetListingPriceQueryAsync();

                var multipleResellFunction = new PutMultiItemsToResellFunction()
                {
                    Nft1155Contract = nft1155Address,
                    AmountToSend = itemIds.Count * listingPrice * backToWeiPrice / 10000,
                    NewPrice = backToWeiPrice,
                    FromAddress = ethAddress,
                    ItemIds = itemIds,
                    Amount = itemIds.Count
                };



                var starboardNft1155Service = new StarboardNFT1155Service(web3, nft1155Address);
                var balance = await starboardNft1155Service.BalanceOfQueryAsync(ethAddress, onlineNFT.TokenId);


                var MultipleResellTransaction = await starboardNFTMarketService.PutMultiItemsToResellRequestAndWaitForReceiptAsync(multipleResellFunction);

                nftData.UniqueNumberOfMintedNFT = (int)onlineNFT.TokenId;
            }

        }

        isPublished = await Service.OnNFTDataPublish(nftData);
        form_step++;
        isLoading = false;
        StateHasChanged();
    }
    catch (Exception e)
    {
        isLoading = false;
        StateHasChanged();
    }
}

void OnChangeTitle()
{
    StateHasChanged();
}

void OnContinue()
{
    if (form_step == 1)
    {
        if ((decimal)0.01 > nftData.FiatStartPrice)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Price", Detail = "Buyout price should be higher than 0.01!", Duration = 4000 });
            return;
        }

        if (nftData.HasBuyoutPrice == true && nftData.FiatBuyOutPrice < nftData.FiatStartPrice)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Price", Detail = "Buyout price should be higher than first price!", Duration = 4000 });
            return;
        }
        if (nftData.HasReservePrice == true && nftData.FiatReservePrice < nftData.FiatStartPrice)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid Price", Detail = "Reserve price should be higher than first price!", Duration = 4000 });
            return;
        }
    }
    else if (form_step == 2 && isSetSchedule == false)
    {
        localStartDateTime = DateTime.UtcNow.ToLocalTime(); //This must be done when you display it.
        localEndDateTime = localStartDateTime.AddDays(auctionDays);
    }
    else if (form_step == 2 && isSetSchedule == true)
    {
        //DateTime localStartDateTime = (DateTime)nftData.SaleStartDate;
        //TimeZoneInfo tz = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
        //utcStartDateTime = TimeZoneInfo.ConvertTimeToUtc(localStartDateTime, tz);
        //utcStartDateTime = (DateTime)nftData.SaleStartDate;
        //DateTime localEndDateTime = (DateTime)nftData.SaleEndtDate;
        //utcEndDateTime = TimeZoneInfo.ConvertTimeToUtc(localEndDateTime, tz);
        //utcEndDateTime = (DateTime)nftData.SaleEndtDate;
    }

    form_step++;
    StateHasChanged();
}

void goBackToPortfolio()
{
    NavigationManager.NavigateTo("portfolio");
}

void OnBack()
{
    if (form_step > 1)
    {
        form_step--;
        StateHasChanged();
    }
}


void ShowNotification(NotificationMessage message)
{
    NotificationService.Notify(message);
}
}
