@page "/create-collection"

@using System.IO
@using System.Text
@using System.Linq
@using System.Threading
@using Microsoft.AspNetCore.Hosting

@using StarboardNFT.Models;
@using StarboardNFT.Data;
@using Nethereum.Web3;
@using Nethereum.Web3.Accounts;
@using Nethereum.UI;
@using Nethereum.ABI.FunctionEncoding.Attributes;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using Nethereum.Signer;
@using Nethereum.Util;
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.RPC.Eth.DTOs;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Web3.Accounts.Managed;
@using Nethereum.Contracts.CQS;
@using Nethereum.Contracts;
@using Nethereum.Contracts.Extensions;
@using System.Numerics;


@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject ApplicationDbContext dbContext;
@inject Blazored.LocalStorage.ILocalStorageService localStore;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationService;
@inject IEthereumHostProvider _metamaskHostProvider;
@inject IJSRuntime JsRunTime;
@inject DialogService DialogService;
@inherits OwningComponentBase<CollectionService>
@inject ProfileService profileService;

<main>
    @if (form_step < 3)
    {
        <section>
            <div class="container" style="margin-top: 50px;">
                <div class="row">
                    <div class="col-lg-7 mb-3">
                        <div class="col__wrapper">
                            <h2>
                                Create Collection
                            </h2>
                            <div class="form__z__wrapper">
                                @if (@form_step == 1)
                                {
                                    <!-- form__z__wrapper--1 -->
                                    <div class="form__z__wrapper--1">
                                        <h4 class="form__z__wrapper--title my-3 my-md-5">
                                            Upload
                                        </h4>
                                        <div class="card bg_transparent">
                                            <div class="card__wrapper">
                                                <div class="card-header p-0">
                                                    <!-- Nav tabs -->
                                                    <ul class="nav nav-tabs form__z__wrapper--tabs">
                                                        <li class="nav-item px-2">
                                                            <a class="nav-link p-1 active" data-toggle="tab"
                                                               href="#Image">Image</a>
                                                        </li>
                                                    </ul>
                                                </div>

                                                <div class="card-body">
                                                    <!-- Tab panes -->
                                                    <div class="tab-content">
                                                        <div class="tab-pane px-0 active container" id="Image">
                                                            @if (@file_extensions == "image" && @file_name != null)
                                                            {
                                                                <label for="image_uploader" class="file__draggable p-3 p-md-5 w-100 text-center">
                                                                    @file_name
                                                                </label>
                                                            }
                                                            else
                                                            {
                                                                <label for="image_uploader" class="file__draggable p-3 p-md-5 w-100 text-center">
                                                                    You can drag and drop your file here. <br>
                                                                    .png, .jpg, and .gif are supported
                                                                </label>
                                                            }
                                                            <div style="display: none;">
                                                                <InputFile OnChange="@CollectionUpload" name="image_uploader" accept=".png,.jpg,.gif" id="image_uploader" />
                                                            </div>
                                                        </div>
                                                       
                                                    </div>
                                                </div>
                                                <div class="card-footer">
                                                    <div class="d-flex justify-content-between flex-wrap p-0">
                                                        @if (success == false)
                                                        {
                                                            <h5 style=" margin: 0px; padding-top: 10px; font-size: 12px; font-weight: 500; color: rgb(243, 79, 79);">@UnSupportedFile</h5>
                                                        }

                                                        <button id="form__z__wrapper--continue"
                                                                class="btn btn-dark rounded-0" @onclick="(() => OnContinue())">
                                                            Continue
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (@form_step == 2)
                                {
                                    <!-- form__z__wrapper--2 -->
                                    <div class="form__z__wrapper--2">
                                        <h4 class="form__z__wrapper--title my-3 my-md-5">
                                            Add information
                                        </h4>
                                        <div class="card bg_transparent">
                                            <div class="card__wrapper">
                                                <div class="card-body">
                                                    <form action="" method="post">
                                                        <div class="form-group">
                                                            <label for="" class="form-label">Display Name</label>
                                                            <input type="text" @bind-value="title" @bind-value:event="oninput" placeholder="Enter Name" class="form-control bg_darkblack form__custom__control">
                                                            <h5 style=" margin: 0px; padding-top: 10px; font-size: 12px; font-weight: 500; color: rgb(243, 79, 79);">@requiredTitle</h5>
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="" class="form-label">Symbol</label>
                                                            <input type="text" @bind-value="symbol" @bind-value:event="oninput" placeholder="Enter Symbol" class="form-control bg_darkblack form__custom__control">
                                                            <h5 style=" margin: 0px; padding-top: 10px; font-size: 12px; font-weight: 500; color: rgb(243, 79, 79);">@requiredSymbol</h5>
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="" class="form-label">Description</label>
                                                            <textarea name="" placeholder="Enter Description" @bind="@description" id="" style="height: 100px;" class="w-100 bg_darkblack form__custom__control form-control"></textarea>
                                                        </div>

                                                    </form>
                                                </div>
                                                <div class="card-footer">
                                                    <div class="d-flex justify-content-between flex-wrap p-0">
                                                        <button id="form__z__wrapper--back" class="btn btn-dark rounded-0" @onclick="(() => OnBack())">
                                                            Back
                                                        </button>
                                                        <button id="form__z__wrapper--continue"
                                                                class="btn btn-dark rounded-0" @onclick="(() => OnContinue())">
                                                            Continue
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-5 mb-3">
                        <div class="col__wrapper">
                            <h4 class="mb-2 mb-md-4">Preview</h4>
                            <div class="form__z__preview__wrapper">

                                @if (!@success)
                                {
                                    <div class="card bg_transparent form__z__preview__wrapper--card">
                                        <div class="card__wrapper">
                                            <div class="card-header p-2 p-md-4"></div>
                                            <div class="card-body card_body_loader p-2 p-md-4"></div>
                                            <div class="card-footer p-2 p-md-4"></div>
                                            <div class="card-footer p-2 p-md-4"></div>
                                        </div>
                                    </div>
                                }
                                else
                                {

                                    <div class="card bg_transparent form__z__wrapper mt-2 mt-md-4">
                                        <div class="card__wrapper">

                                            @if (@file_extensions == "image")
                                            {
                                                <div class="file__output__wrapper">
                                                    <img src="@previewSrc" alt="" class="img_object_cover rounded-0 card-img border-0 h-100 w-100">
                                                </div>
                                            }
                                           
                                            <div class="card-body">
                                                @if (!string.IsNullOrEmpty(@title))
                                                {
                                                    <strong>@title</strong>
                                                }
                                                else
                                                {
                                                    <strong> Display Name</strong>
                                                }

                                                <div class="created__user">
                                                    <span class="text-white-50">Created by</span> <span class="px-2">
                                                        <i class="fas fa-user  text-info  "></i> @shortAddr
                                                    </span>
                                                </div>
                                            </div>
                                            <footer class="card-footer p-3 p-md-4">
                                            </footer>
                                        </div>

                                    </div>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
    else
    {

        <div class="container">
            <div class="row">
                <div class="col-lg-5 mb-3">
                    <div class="col__wrapper ">
                        <h2>
                            Create Collection
                        </h2>
                        <div class="card bg_transparent form__z__wrapper mt-2 mt-md-4">
                            <div class="card__wrapper">
                                @if (@file_extensions == "image")
                                {
                                    <div class="file__output__wrapper">
                                        <img src="@previewSrc" alt="" class="img_object_cover rounded-0 card-img border-0 h-100 w-100">
                                    </div>
                                }
                                
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(title))
                                    {
                                        <strong>@title</strong>
                                    }
                                    else
                                    {
                                        <strong> Display Name </strong>
                                    }

                                    <div class="created__user">
                                        <span class="text-white-50">Created by</span> <span class="px-2">
                                            <i class="fas fa-user  text-info  "></i> @shortAddr
                                        </span>
                                    </div>
                                </div>
                                <footer class="card-footer p-3 p-md-4">
                                </footer>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-7 h-auto mb-3">
                    @if (@form_step == 3)
                    {
                        <div class="col__wrapper h-100 row justify-content-center align-items-center">
                            <div class="col-10 col-md-9 col-lg-8">
                                <p class="my-3 my-md-4 text-white-50" style="text-align: center;">
                                    You are about to release <span class="text-white user__name">@title</span> to the world.
                                </p>
                                <div class="w-100 text-center">
                                    <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-5 py-2 mr-2" @onclick="(() => OnBack())">
                                        Back
                                    </button>
                                    <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2" @onclick="(() => OnPublish())">
                                        Finalize & Publish
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (@form_step == 4 && publishedID == Guid.Empty)
                    {
                        <div class="col__wrapper h-100 row justify-content-center align-items-center">
                            <div class="col-10 col-md-9 col-lg-8">
                                <span class="reject__icon d-block text-center h1">
                                    !
                                </span>
                                <p class="my-3 my-md-4 text-white-50">
                                    It looks like the transition was rejected in your wallet. Try again?
                                </p>
                                <div class="w-100 text-center">
                                    <button class="btn btn-dark bg_darkblack border-0 rounded-0 p-3 px-md-4">
                                        Retry
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (@form_step == 4 && publishedID != Guid.Empty)
                    {
                        <div class="col__wrapper h-100 row justify-content-center align-items-center">
                            <div class="col-10 col-md-9 col-lg-8">
                                <span class="d-block text-center ">
                                    <i class="fas fa-check-circle fa-10x  text-success  "></i>
                                </span>
                                <p class="my-3 my-md-4 text-center">
                                    <strong class="text-success"> NFT Successfully Created</strong>
                                </p>
                                <div class="w-100 text-center">
                                    <button class="btn btn-dark bg_darkblack border-0 rounded-0 px-3 py-2 mr-2" @onclick="@goBackToCollection">
                                        View Collection
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</main>

@code {

    StarboardNFT.Models.Collection CollectionData = new StarboardNFT.Models.Collection();

    public string title { get; set; }
    public string symbol { get; set;  }
    string description { get; set; }
    string file_name { get; set; }
    string file_type { get; set; }
    string file_extensions { get; set; }
    byte[] file_content { get; set; }
    bool success { get; set; }
    Guid publishedID { get; set; }
    string previewSrc { get; set; }
    string ethAddress { get; set; }
    int form_step { get; set; }
    public string shortAddr { get; set; }
    string requiredTitle { get; set; }
    string requiredSymbol { get; set; }
    string UnSupportedFile { get; set; }
    string dialogResult { get; set; }


    private static Web3 web3;



    UserProfile objProfileSettings = new UserProfile();
    UserProfileHeader objProfileHeaderSettings = new UserProfileHeader();



    protected async override Task OnAfterRenderAsync(bool firstRender)

    {

        if (firstRender)
        {
            ethAddress = await localStore.GetItemAsync<string>("address");
            if (!string.IsNullOrEmpty(ethAddress))
            {
                shortAddr = ethAddress.Substring(0, 6) + "..." + ethAddress.Substring(38);
            }
            form_step = 1;
            StateHasChanged();
        }
    }

    private async Task CollectionUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        //accept=".png,.jpg,.gif"
        file_name = e.File.Name;
        file_type = e.File.ContentType;

        System.IO.FileInfo fi = new System.IO.FileInfo(file_name);
        var file_extension = fi.Extension;

        success = false;

        if (file_type.StartsWith("image/"))
        {
            if (file_extension == ".png" || file_extension == ".jpg" || file_extension == ".gif")
            {
                success = true;
                file_extensions = "image";
            }
        }
        else if (file_type.StartsWith("video/"))
        {
            if (file_extension == ".mp4" || file_extension == ".mov")
            {
                success = true;
                file_extensions = "video";
            }
        }
        else if (file_type.StartsWith("audio/"))
        {
            if (file_extension == ".mp3" || file_extension == ".wav")
            {
                success = true;
                file_extensions = "audio";
            }
        }
        else if (file_type.StartsWith("text/"))
        {
            if (file_extension == ".txt" || file_extension == ".md")
            {
                success = true;
                file_extensions = "text";
            }
        }
        else if (file_type.StartsWith("application/"))
        {
            if (file_extension == ".pdf" || file_extension == ".psd" || file_extension == ".ai")
            {
                success = true;
                file_extensions = "application";
            }
        }

        if (success == true)
        {
            UnSupportedFile = "";
        }
        else
        {
            UnSupportedFile = "Unsupported file type.";
            StateHasChanged();
            return;
        }

        long maxAllowedSize = 40000000;
        try
        {
            await e.File.OpenReadStream(maxAllowedSize).CopyToAsync(ms);
            file_content = ms.ToArray();
        }
        catch (Exception error)
        {
            Console.WriteLine(error);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Image Processing Error", Detail = "Please try to upload image again.", Duration = 4000 });
            StateHasChanged();
            return;
        }



        if (file_type.StartsWith("text/"))
        {
            previewSrc = Encoding.UTF8.GetString(file_content, 0, file_content.Length);
        }
        else
        {
            string base64 = Convert.ToBase64String(file_content);
            previewSrc = string.Format("data:{0};base64,{1}", file_type, base64);
        }

        StateHasChanged();
    }

    async Task OnPublish()
    {

        Guid userProfileId = await profileService.GetUserProfileId(ethAddress);
        if (userProfileId == Guid.Empty)
        {
            var profileheader_Id = await localStore.GetItemAsync<string>("headerId");
            await ShowInlineDialog();
            return;
        }

        CollectionData.DisplayName = title;
        CollectionData.Symbol = symbol;
        CollectionData.UserProfileId = userProfileId;
        CollectionData.Description = description;
        CollectionData.FileName = file_name;
        CollectionData.FileType = file_type;
        CollectionData.FileContent = file_content;
        publishedID = await Service.CreateCollection(CollectionData);
        NavigationManager.NavigateTo("collections/"+publishedID);
        StateHasChanged();
    }

    void OnChangeTitle()
    {
        StateHasChanged();
    }

    void goBackToCollection()
    {
        NavigationManager.NavigateTo("collection");
    }



    void OnContinue()
    {
        if (form_step == 1 && !string.IsNullOrEmpty(UnSupportedFile))
        {
            return;
        }
        else if (form_step == 2 && string.IsNullOrEmpty(title))
        {
            requiredTitle = "Name is required";
            StateHasChanged();
            return;
        }
        else requiredTitle = "";

        form_step++;
        StateHasChanged();
    }

    void OnBack()
    {
        if (form_step > 1)
        {
            form_step--;
            StateHasChanged();
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }


    async Task ShowInlineDialog() => await DialogService.OpenAsync("Simple Dialog", ds =>
    @<div>
        <div class="row">
            <div class="col-md-12" Data="@objProfileSettings">
                <RadzenLabel Style="color: black;" Text="Email Address : " />
                <RadzenTextBox Placeholder="email" @bind-Value=@objProfileHeaderSettings.Email />

                <br />
                <RadzenLabel Style="color: black; margin-left: 27px;" Text="Username : " />
                <RadzenTextBox Placeholder="username" @bind-Value=@objProfileHeaderSettings.UserName />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Save" Click='() => OnDialogEvents("save")' Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                <RadzenLabel Style="color: black;" Text="If you have signed in before and want to link your account please click the button below" />
                <RadzenButton Text="Link Account" Click='() => OnDialogEvents("linkAccount")' Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>

    </div>);

    async void OnDialogEvents(dynamic result)
    {
        dialogResult = result;
        if (result == "save")
        {
            if (string.IsNullOrEmpty(objProfileHeaderSettings.UserName) || string.IsNullOrEmpty(objProfileHeaderSettings.Email))
            {
                await JsRunTime.InvokeVoidAsync("alert", "Error! You need to input username and email.");
            }
            else
            {
                OnSaveProfileSetting();
            }
        }
        else if (result == "linkAccount")
        {
            // OnSignOutClick();
        }
    }

    async void OnSaveProfileSetting()
    {

        var profileSettingSave = await profileService.SaveProfileAsync(objProfileHeaderSettings);

        if (profileSettingSave != Guid.Empty)
        {
            UserProfile userProfile = new UserProfile();
            userProfile.EthAddress = ethAddress;
            userProfile.UserProfileHeaderId = profileSettingSave;

            var userProfileSettingSave = await profileService.SaveUserProfileAsync(userProfile);

            await JsRunTime.InvokeVoidAsync("alert", "Profile Saved...");
            DialogService.Close();

        }
        else
        {
            await JsRunTime.InvokeVoidAsync("alert", "Error! Profile did not save because there is exist same username.");
        }
    }
}